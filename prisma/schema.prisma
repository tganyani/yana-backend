// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  image            String?
  imagePublicId    String?
  position         String?
  role             Role           @default(designer)
  verified         Boolean        @default(false)
  isAdmin          Boolean        @default(false)
  verificationCode String?
  projects         Project[]
  rooms            Room[]
  comments         Comments[]
  likes            Like[]
  isOnline         Boolean        @default(false)
  lastSeen         DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Notification     Notification[]
  projectViewed      ProjectView[]
}

enum Role {
  designer
  client
}

model Project {
  id           String          @id @default(cuid())
  title        String
  description  String
  field        String
  images       ProjectImages[]
  comments     Comments[]
  likes        Like[]
  userId       Int
  user         User            @relation(fields: [userId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Notification Notification[]
  views  ProjectView[]
}

model ProjectImages {
  publicId  String   @id
  url       String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id          String      @id @default(cuid())
  message     String
  roomId      String
  userId      Int
  delivered   Boolean     @default(false)
  read        Boolean     @default(false)
  room        Room        @relation(fields: [roomId], references: [id])
  media       ChatMedia[]
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @updatedAt
}

model Room {
  id          String   @id @default(cuid())
  name        String   @unique
  chats       Chat[]
  users       User[]
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
}

model ChatMedia {
  publicId  String   @id
  url       String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id        String   @id @default(cuid())
  userId    Int
  text      String
  user      User     @relation(fields: [userId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String  @id @default(uuid())
  userId    Int
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // Ensure one like per user per project
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  projectId String
  type      String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model ProjectView {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  viewedAt  DateTime @default(now())

  @@unique([userId, projectId]) // ensures one view per user per project
}
